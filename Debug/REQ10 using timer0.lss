
REQ10 using timer0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000072a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000072a  000007be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  000007be  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000007c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00000f18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001045  00000000  00000000  00001058  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a3  00000000  00000000  0000209d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000567  00000000  00000000  00002540  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000031c  00000000  00000000  00002aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007eb  00000000  00000000  00002dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000859  00000000  00000000  000035af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 97 02 	jmp	0x52e	; 0x52e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e2       	ldi	r30, 0x2A	; 42
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 59 02 	call	0x4b2	; 0x4b2 <main>
  8a:	0c 94 93 03 	jmp	0x726	; 0x726 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <gpioPortDirection>:
 * @param value: set the port value and takes the following values
 * 				- 0x00 -> Low
 * 				- 0xff -> High
 */

switch (u8_port)	
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	49 f0       	breq	.+18     	; 0xa8 <gpioPortDirection+0x16>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	28 f0       	brcs	.+10     	; 0xa4 <gpioPortDirection+0x12>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	39 f0       	breq	.+14     	; 0xac <gpioPortDirection+0x1a>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	41 f4       	brne	.+16     	; 0xb2 <gpioPortDirection+0x20>
  a2:	06 c0       	rjmp	.+12     	; 0xb0 <gpioPortDirection+0x1e>
{	case GPIOA:
	PORTA_DIR = u8_direction;
  a4:	6a bb       	out	0x1a, r22	; 26
	break;
  a6:	08 95       	ret
	case GPIOB:
	PORTB_DIR = u8_direction;
  a8:	67 bb       	out	0x17, r22	; 23
	break;
  aa:	08 95       	ret
	case GPIOC:
	PORTC_DIR = u8_direction;
  ac:	64 bb       	out	0x14, r22	; 20
	break;
  ae:	08 95       	ret
	case GPIOD:
	PORTD_DIR = u8_direction;
  b0:	61 bb       	out	0x11, r22	; 17
  b2:	08 95       	ret

000000b4 <gpioPortWrite>:
}

void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
	
switch (u8_port)	
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	49 f0       	breq	.+18     	; 0xca <gpioPortWrite+0x16>
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	28 f0       	brcs	.+10     	; 0xc6 <gpioPortWrite+0x12>
  bc:	82 30       	cpi	r24, 0x02	; 2
  be:	39 f0       	breq	.+14     	; 0xce <gpioPortWrite+0x1a>
  c0:	83 30       	cpi	r24, 0x03	; 3
  c2:	41 f4       	brne	.+16     	; 0xd4 <gpioPortWrite+0x20>
  c4:	06 c0       	rjmp	.+12     	; 0xd2 <gpioPortWrite+0x1e>
{	case GPIOA:
	PORTA_DATA = u8_value;
  c6:	6b bb       	out	0x1b, r22	; 27
	break;
  c8:	08 95       	ret
	case GPIOB:
	PORTB_DATA = u8_value;
  ca:	68 bb       	out	0x18, r22	; 24
	break;
  cc:	08 95       	ret
	case GPIOC:
	PORTC_DATA = u8_value;
  ce:	65 bb       	out	0x15, r22	; 21
	break;
  d0:	08 95       	ret
	case GPIOD:
	PORTD_DATA = u8_value;
  d2:	62 bb       	out	0x12, r22	; 18
  d4:	08 95       	ret

000000d6 <gpioPortToggle>:
	
}
void gpioPortToggle(uint8_t u8_port)
{
	
switch (u8_port)	
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	59 f0       	breq	.+22     	; 0xf0 <gpioPortToggle+0x1a>
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	28 f0       	brcs	.+10     	; 0xe8 <gpioPortToggle+0x12>
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	59 f0       	breq	.+22     	; 0xf8 <gpioPortToggle+0x22>
  e2:	83 30       	cpi	r24, 0x03	; 3
  e4:	81 f4       	brne	.+32     	; 0x106 <gpioPortToggle+0x30>
  e6:	0c c0       	rjmp	.+24     	; 0x100 <gpioPortToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^= HIGH;
  e8:	8b b3       	in	r24, 0x1b	; 27
  ea:	80 95       	com	r24
  ec:	8b bb       	out	0x1b, r24	; 27
	break;
  ee:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^= HIGH;
  f0:	88 b3       	in	r24, 0x18	; 24
  f2:	80 95       	com	r24
  f4:	88 bb       	out	0x18, r24	; 24
	break;
  f6:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^= HIGH;
  f8:	85 b3       	in	r24, 0x15	; 21
  fa:	80 95       	com	r24
  fc:	85 bb       	out	0x15, r24	; 21
	break;
  fe:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^= HIGH;
 100:	82 b3       	in	r24, 0x12	; 18
 102:	80 95       	com	r24
 104:	82 bb       	out	0x12, r24	; 18
 106:	08 95       	ret

00000108 <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
	
switch (u8_port)	
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	49 f0       	breq	.+18     	; 0x11e <gpioPortRead+0x16>
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	28 f0       	brcs	.+10     	; 0x11a <gpioPortRead+0x12>
 110:	82 30       	cpi	r24, 0x02	; 2
 112:	39 f0       	breq	.+14     	; 0x122 <gpioPortRead+0x1a>
 114:	83 30       	cpi	r24, 0x03	; 3
 116:	49 f4       	brne	.+18     	; 0x12a <gpioPortRead+0x22>
 118:	06 c0       	rjmp	.+12     	; 0x126 <gpioPortRead+0x1e>
{	case GPIOA:
	U8_ret_Port_data=PORTA_DATA & HIGH;
 11a:	8b b3       	in	r24, 0x1b	; 27
	break;
 11c:	08 95       	ret
	case GPIOB:
	U8_ret_Port_data=PORTB_DATA & HIGH;
 11e:	88 b3       	in	r24, 0x18	; 24
	break;
 120:	08 95       	ret
	case GPIOC:
	U8_ret_Port_data=PORTC_DATA & HIGH;
 122:	85 b3       	in	r24, 0x15	; 21
	break;
 124:	08 95       	ret
	case GPIOD:
	U8_ret_Port_data=PORTD_DATA & HIGH;
 126:	82 b3       	in	r24, 0x12	; 18
	break;
 128:	08 95       	ret
	
}

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
 12a:	80 e0       	ldi	r24, 0x00	; 0
	break;
	
}

return 	U8_ret_Port_data;
}
 12c:	08 95       	ret

0000012e <gpioPinDirection>:
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
switch(u8_direction){
 12e:	44 23       	and	r20, r20
 130:	19 f0       	breq	.+6      	; 0x138 <gpioPinDirection+0xa>
 132:	4f 3f       	cpi	r20, 0xFF	; 255
 134:	d1 f5       	brne	.+116    	; 0x1aa <gpioPinDirection+0x7c>
 136:	21 c0       	rjmp	.+66     	; 0x17a <gpioPinDirection+0x4c>
case INPUT:
{
switch (u8_port)	
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	69 f0       	breq	.+26     	; 0x156 <gpioPinDirection+0x28>
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	28 f0       	brcs	.+10     	; 0x14a <gpioPinDirection+0x1c>
 140:	82 30       	cpi	r24, 0x02	; 2
 142:	79 f0       	breq	.+30     	; 0x162 <gpioPinDirection+0x34>
 144:	83 30       	cpi	r24, 0x03	; 3
 146:	c9 f4       	brne	.+50     	; 0x17a <gpioPinDirection+0x4c>
 148:	12 c0       	rjmp	.+36     	; 0x16e <gpioPinDirection+0x40>
{	case GPIOA:
	PORTA_DIR &=(~u8_pins);   // 0b01111111
 14a:	8a b3       	in	r24, 0x1a	; 26
 14c:	96 2f       	mov	r25, r22
 14e:	90 95       	com	r25
 150:	89 23       	and	r24, r25
 152:	8a bb       	out	0x1a, r24	; 26
 154:	1b c0       	rjmp	.+54     	; 0x18c <gpioPinDirection+0x5e>
	break;
	case GPIOB:
	PORTB_DIR &=(~u8_pins);
 156:	87 b3       	in	r24, 0x17	; 23
 158:	96 2f       	mov	r25, r22
 15a:	90 95       	com	r25
 15c:	89 23       	and	r24, r25
 15e:	87 bb       	out	0x17, r24	; 23
 160:	19 c0       	rjmp	.+50     	; 0x194 <gpioPinDirection+0x66>
	break;
	case GPIOC:
	PORTC_DIR &=(~u8_pins);
 162:	84 b3       	in	r24, 0x14	; 20
 164:	96 2f       	mov	r25, r22
 166:	90 95       	com	r25
 168:	89 23       	and	r24, r25
 16a:	84 bb       	out	0x14, r24	; 20
 16c:	17 c0       	rjmp	.+46     	; 0x19c <gpioPinDirection+0x6e>
	break;
	case GPIOD:
	PORTD_DIR &=(~u8_pins);
 16e:	81 b3       	in	r24, 0x11	; 17
 170:	96 2f       	mov	r25, r22
 172:	90 95       	com	r25
 174:	89 23       	and	r24, r25
 176:	81 bb       	out	0x11, r24	; 17
 178:	15 c0       	rjmp	.+42     	; 0x1a4 <gpioPinDirection+0x76>
	break;
	
}
}
case OUTPUT:{
switch (u8_port)	
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	59 f0       	breq	.+22     	; 0x194 <gpioPinDirection+0x66>
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	28 f0       	brcs	.+10     	; 0x18c <gpioPinDirection+0x5e>
 182:	82 30       	cpi	r24, 0x02	; 2
 184:	59 f0       	breq	.+22     	; 0x19c <gpioPinDirection+0x6e>
 186:	83 30       	cpi	r24, 0x03	; 3
 188:	81 f4       	brne	.+32     	; 0x1aa <gpioPinDirection+0x7c>
 18a:	0c c0       	rjmp	.+24     	; 0x1a4 <gpioPinDirection+0x76>
{	case GPIOA:
	PORTA_DIR |=(u8_pins);
 18c:	8a b3       	in	r24, 0x1a	; 26
 18e:	68 2b       	or	r22, r24
 190:	6a bb       	out	0x1a, r22	; 26
	break;
 192:	08 95       	ret
	case GPIOB:
	PORTB_DIR |=(u8_pins);
 194:	87 b3       	in	r24, 0x17	; 23
 196:	68 2b       	or	r22, r24
 198:	67 bb       	out	0x17, r22	; 23
	break;
 19a:	08 95       	ret
	case GPIOC:
	PORTC_DIR |=(u8_pins);
 19c:	84 b3       	in	r24, 0x14	; 20
 19e:	68 2b       	or	r22, r24
 1a0:	64 bb       	out	0x14, r22	; 20
	break;
 1a2:	08 95       	ret
	case GPIOD:
	PORTD_DIR |=(u8_pins);
 1a4:	81 b3       	in	r24, 0x11	; 17
 1a6:	68 2b       	or	r22, r24
 1a8:	61 bb       	out	0x11, r22	; 17
 1aa:	08 95       	ret

000001ac <gpioPinWrite>:
	
	
}

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{switch(u8_value){
 1ac:	44 23       	and	r20, r20
 1ae:	19 f0       	breq	.+6      	; 0x1b6 <gpioPinWrite+0xa>
 1b0:	4f 3f       	cpi	r20, 0xFF	; 255
 1b2:	b1 f5       	brne	.+108    	; 0x220 <gpioPinWrite+0x74>
 1b4:	1d c0       	rjmp	.+58     	; 0x1f0 <gpioPinWrite+0x44>
case LOW:
{
switch (u8_port)	
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	61 f0       	breq	.+24     	; 0x1d2 <gpioPinWrite+0x26>
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	28 f0       	brcs	.+10     	; 0x1c8 <gpioPinWrite+0x1c>
 1be:	82 30       	cpi	r24, 0x02	; 2
 1c0:	69 f0       	breq	.+26     	; 0x1dc <gpioPinWrite+0x30>
 1c2:	83 30       	cpi	r24, 0x03	; 3
 1c4:	69 f5       	brne	.+90     	; 0x220 <gpioPinWrite+0x74>
 1c6:	0f c0       	rjmp	.+30     	; 0x1e6 <gpioPinWrite+0x3a>
{	case GPIOA:
	PORTA_DATA &= ~(u8_pins);   // 0b01111111
 1c8:	8b b3       	in	r24, 0x1b	; 27
 1ca:	60 95       	com	r22
 1cc:	68 23       	and	r22, r24
 1ce:	6b bb       	out	0x1b, r22	; 27
	break;
 1d0:	08 95       	ret
	case GPIOB:
	PORTB_DATA &= ~(u8_pins);
 1d2:	88 b3       	in	r24, 0x18	; 24
 1d4:	60 95       	com	r22
 1d6:	68 23       	and	r22, r24
 1d8:	68 bb       	out	0x18, r22	; 24
	break;
 1da:	08 95       	ret
	case GPIOC:
	PORTC_DATA &= ~(u8_pins);
 1dc:	85 b3       	in	r24, 0x15	; 21
 1de:	60 95       	com	r22
 1e0:	68 23       	and	r22, r24
 1e2:	65 bb       	out	0x15, r22	; 21
	break;
 1e4:	08 95       	ret
	case GPIOD:
	PORTD_DATA &= ~(u8_pins);
 1e6:	82 b3       	in	r24, 0x12	; 18
 1e8:	60 95       	com	r22
 1ea:	68 23       	and	r22, r24
 1ec:	62 bb       	out	0x12, r22	; 18
	break;
 1ee:	08 95       	ret
	
}
break;
}
case HIGH:{
switch (u8_port)	
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	59 f0       	breq	.+22     	; 0x20a <gpioPinWrite+0x5e>
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	28 f0       	brcs	.+10     	; 0x202 <gpioPinWrite+0x56>
 1f8:	82 30       	cpi	r24, 0x02	; 2
 1fa:	59 f0       	breq	.+22     	; 0x212 <gpioPinWrite+0x66>
 1fc:	83 30       	cpi	r24, 0x03	; 3
 1fe:	81 f4       	brne	.+32     	; 0x220 <gpioPinWrite+0x74>
 200:	0c c0       	rjmp	.+24     	; 0x21a <gpioPinWrite+0x6e>
{	case GPIOA:
	PORTA_DATA |=(u8_pins);
 202:	8b b3       	in	r24, 0x1b	; 27
 204:	68 2b       	or	r22, r24
 206:	6b bb       	out	0x1b, r22	; 27
	break;
 208:	08 95       	ret
	case GPIOB:
	PORTB_DATA |=(u8_pins);
 20a:	88 b3       	in	r24, 0x18	; 24
 20c:	68 2b       	or	r22, r24
 20e:	68 bb       	out	0x18, r22	; 24
	break;
 210:	08 95       	ret
	case GPIOC:
	PORTC_DATA |=(u8_pins);
 212:	85 b3       	in	r24, 0x15	; 21
 214:	68 2b       	or	r22, r24
 216:	65 bb       	out	0x15, r22	; 21
	break;
 218:	08 95       	ret
	case GPIOD:
	PORTD_DATA |=(u8_pins);
 21a:	82 b3       	in	r24, 0x12	; 18
 21c:	68 2b       	or	r22, r24
 21e:	62 bb       	out	0x12, r22	; 18
 220:	08 95       	ret

00000222 <gpioPinToggle>:
}

}
void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
switch (u8_port)	
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	59 f0       	breq	.+22     	; 0x23c <gpioPinToggle+0x1a>
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	28 f0       	brcs	.+10     	; 0x234 <gpioPinToggle+0x12>
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	59 f0       	breq	.+22     	; 0x244 <gpioPinToggle+0x22>
 22e:	83 30       	cpi	r24, 0x03	; 3
 230:	81 f4       	brne	.+32     	; 0x252 <gpioPinToggle+0x30>
 232:	0c c0       	rjmp	.+24     	; 0x24c <gpioPinToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^=(u8_pins);
 234:	8b b3       	in	r24, 0x1b	; 27
 236:	68 27       	eor	r22, r24
 238:	6b bb       	out	0x1b, r22	; 27
	break;
 23a:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^=(u8_pins);
 23c:	88 b3       	in	r24, 0x18	; 24
 23e:	68 27       	eor	r22, r24
 240:	68 bb       	out	0x18, r22	; 24
	break;
 242:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^=(u8_pins);
 244:	85 b3       	in	r24, 0x15	; 21
 246:	68 27       	eor	r22, r24
 248:	65 bb       	out	0x15, r22	; 21
	break;
 24a:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^=(u8_pins);
 24c:	82 b3       	in	r24, 0x12	; 18
 24e:	68 27       	eor	r22, r24
 250:	62 bb       	out	0x12, r22	; 18
 252:	08 95       	ret

00000254 <gpioPinRead>:
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
switch (u8_port)	
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	51 f0       	breq	.+20     	; 0x26c <gpioPinRead+0x18>
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	28 f0       	brcs	.+10     	; 0x266 <gpioPinRead+0x12>
 25c:	82 30       	cpi	r24, 0x02	; 2
 25e:	49 f0       	breq	.+18     	; 0x272 <gpioPinRead+0x1e>
 260:	83 30       	cpi	r24, 0x03	; 3
 262:	69 f4       	brne	.+26     	; 0x27e <gpioPinRead+0x2a>
 264:	09 c0       	rjmp	.+18     	; 0x278 <gpioPinRead+0x24>
{	case GPIOA:
	U8_ret_BIT_data=(PORTA_PIN & u8_pin);
 266:	89 b3       	in	r24, 0x19	; 25
 268:	68 23       	and	r22, r24
	break;
 26a:	0a c0       	rjmp	.+20     	; 0x280 <gpioPinRead+0x2c>
	case GPIOB:
	U8_ret_BIT_data=(PORTB_PIN & u8_pin);
 26c:	86 b3       	in	r24, 0x16	; 22
 26e:	68 23       	and	r22, r24
	break;
 270:	07 c0       	rjmp	.+14     	; 0x280 <gpioPinRead+0x2c>
	case GPIOC:
	U8_ret_BIT_data=(PORTC_PIN & u8_pin);
 272:	83 b3       	in	r24, 0x13	; 19
 274:	68 23       	and	r22, r24
	break;
 276:	04 c0       	rjmp	.+8      	; 0x280 <gpioPinRead+0x2c>
	case GPIOD:
	U8_ret_BIT_data=(PORTD_PIN & u8_pin);
 278:	80 b3       	in	r24, 0x10	; 16
 27a:	68 23       	and	r22, r24
	break;
 27c:	01 c0       	rjmp	.+2      	; 0x280 <gpioPinRead+0x2c>
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
 27e:	60 e0       	ldi	r22, 0x00	; 0
}
	
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	66 23       	and	r22, r22
 284:	09 f4       	brne	.+2      	; 0x288 <gpioPinRead+0x34>
 286:	80 e0       	ldi	r24, 0x00	; 0
if(U8_ret_BIT_data > 0)
{
	U8_ret_BIT_data = 1;
}
return U8_ret_BIT_data;
 288:	08 95       	ret

0000028a <G_interrupt_Enable>:
#include "Interrupts.h"

void G_interrupt_Enable(void)
{
//SET_BIT(SREG,7);	
SREG |=(1<<7);
 28a:	8f b7       	in	r24, 0x3f	; 63
 28c:	80 68       	ori	r24, 0x80	; 128
 28e:	8f bf       	out	0x3f, r24	; 63
}
 290:	08 95       	ret

00000292 <G_interrupt_Disable>:

void G_interrupt_Disable(void)
{

SREG &=(~(SREG,7));
 292:	8f b7       	in	r24, 0x3f	; 63
 294:	8f b7       	in	r24, 0x3f	; 63
 296:	88 7f       	andi	r24, 0xF8	; 248
 298:	8f bf       	out	0x3f, r24	; 63
}
 29a:	08 95       	ret

0000029c <Led_Init>:
	LED_3

*/
void Led_Init(En_LedNumber_t en_led_id)
{
switch(en_led_id)
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	69 f0       	breq	.+26     	; 0x2ba <Led_Init+0x1e>
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	28 f0       	brcs	.+10     	; 0x2ae <Led_Init+0x12>
 2a4:	82 30       	cpi	r24, 0x02	; 2
 2a6:	79 f0       	breq	.+30     	; 0x2c6 <Led_Init+0x2a>
 2a8:	83 30       	cpi	r24, 0x03	; 3
 2aa:	c1 f4       	brne	.+48     	; 0x2dc <Led_Init+0x40>
 2ac:	12 c0       	rjmp	.+36     	; 0x2d2 <Led_Init+0x36>
{
case LED_0:
gpioPinDirection(LED_0_GPIO,LED_0_BIT,HIGH);
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	60 e1       	ldi	r22, 0x10	; 16
 2b2:	4f ef       	ldi	r20, 0xFF	; 255
 2b4:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
break;
 2b8:	08 95       	ret

case LED_1:
gpioPinDirection(LED_1_GPIO,LED_1_BIT,HIGH);
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	60 e2       	ldi	r22, 0x20	; 32
 2be:	4f ef       	ldi	r20, 0xFF	; 255
 2c0:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
break;
 2c4:	08 95       	ret

case LED_2:
gpioPinDirection(LED_2_GPIO,LED_2_BIT,HIGH);
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	60 e4       	ldi	r22, 0x40	; 64
 2ca:	4f ef       	ldi	r20, 0xFF	; 255
 2cc:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
break;
 2d0:	08 95       	ret

case LED_3:
gpioPinDirection(LED_3_GPIO,LED_3_BIT,HIGH);
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	60 e8       	ldi	r22, 0x80	; 128
 2d6:	4f ef       	ldi	r20, 0xFF	; 255
 2d8:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
 2dc:	08 95       	ret

000002de <Led_On>:
}


void Led_On(En_LedNumber_t en_led_id)
{
switch(en_led_id)
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	69 f0       	breq	.+26     	; 0x2fc <Led_On+0x1e>
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	28 f0       	brcs	.+10     	; 0x2f0 <Led_On+0x12>
 2e6:	82 30       	cpi	r24, 0x02	; 2
 2e8:	79 f0       	breq	.+30     	; 0x308 <Led_On+0x2a>
 2ea:	83 30       	cpi	r24, 0x03	; 3
 2ec:	c1 f4       	brne	.+48     	; 0x31e <Led_On+0x40>
 2ee:	12 c0       	rjmp	.+36     	; 0x314 <Led_On+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,HIGH);
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	60 e1       	ldi	r22, 0x10	; 16
 2f4:	4f ef       	ldi	r20, 0xFF	; 255
 2f6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
break;
 2fa:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,HIGH);
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	60 e2       	ldi	r22, 0x20	; 32
 300:	4f ef       	ldi	r20, 0xFF	; 255
 302:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
break;
 306:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,HIGH);
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	60 e4       	ldi	r22, 0x40	; 64
 30c:	4f ef       	ldi	r20, 0xFF	; 255
 30e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
break;
 312:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,HIGH);
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	60 e8       	ldi	r22, 0x80	; 128
 318:	4f ef       	ldi	r20, 0xFF	; 255
 31a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
 31e:	08 95       	ret

00000320 <Led_Off>:
}

void Led_Off(En_LedNumber_t en_led_id)
{

switch(en_led_id)
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	69 f0       	breq	.+26     	; 0x33e <Led_Off+0x1e>
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	28 f0       	brcs	.+10     	; 0x332 <Led_Off+0x12>
 328:	82 30       	cpi	r24, 0x02	; 2
 32a:	79 f0       	breq	.+30     	; 0x34a <Led_Off+0x2a>
 32c:	83 30       	cpi	r24, 0x03	; 3
 32e:	c1 f4       	brne	.+48     	; 0x360 <Led_Off+0x40>
 330:	12 c0       	rjmp	.+36     	; 0x356 <Led_Off+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,LOW);
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	60 e1       	ldi	r22, 0x10	; 16
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
break;
 33c:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,LOW);
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	60 e2       	ldi	r22, 0x20	; 32
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
break;
 348:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,LOW);
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	60 e4       	ldi	r22, 0x40	; 64
 34e:	40 e0       	ldi	r20, 0x00	; 0
 350:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
break;
 354:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,LOW);
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	60 e8       	ldi	r22, 0x80	; 128
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
 360:	08 95       	ret

00000362 <Led_Toggle>:


}
void Led_Toggle(En_LedNumber_t en_led_id)
{
switch(en_led_id)
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	61 f0       	breq	.+24     	; 0x37e <Led_Toggle+0x1c>
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	28 f0       	brcs	.+10     	; 0x374 <Led_Toggle+0x12>
 36a:	82 30       	cpi	r24, 0x02	; 2
 36c:	69 f0       	breq	.+26     	; 0x388 <Led_Toggle+0x26>
 36e:	83 30       	cpi	r24, 0x03	; 3
 370:	a1 f4       	brne	.+40     	; 0x39a <Led_Toggle+0x38>
 372:	0f c0       	rjmp	.+30     	; 0x392 <Led_Toggle+0x30>
{
case LED_0:
gpioPinToggle(LED_0_GPIO,LED_0_BIT);
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	60 e1       	ldi	r22, 0x10	; 16
 378:	0e 94 11 01 	call	0x222	; 0x222 <gpioPinToggle>
break;
 37c:	08 95       	ret

case LED_1:
gpioPinToggle(LED_1_GPIO,LED_1_BIT);
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	60 e2       	ldi	r22, 0x20	; 32
 382:	0e 94 11 01 	call	0x222	; 0x222 <gpioPinToggle>
break;
 386:	08 95       	ret

case LED_2:
gpioPinToggle(LED_2_GPIO,LED_2_BIT);
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	60 e4       	ldi	r22, 0x40	; 64
 38c:	0e 94 11 01 	call	0x222	; 0x222 <gpioPinToggle>
break;
 390:	08 95       	ret

case LED_3:
gpioPinToggle(LED_3_GPIO,LED_3_BIT);
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	60 e8       	ldi	r22, 0x80	; 128
 396:	0e 94 11 01 	call	0x222	; 0x222 <gpioPinToggle>
 39a:	08 95       	ret

0000039c <pushButtonInit>:
	BTN_3
*/
void pushButtonInit(En_buttonId_t en_butotn_id)
{
	
switch(en_butotn_id)
 39c:	81 30       	cpi	r24, 0x01	; 1
 39e:	69 f0       	breq	.+26     	; 0x3ba <pushButtonInit+0x1e>
 3a0:	81 30       	cpi	r24, 0x01	; 1
 3a2:	28 f0       	brcs	.+10     	; 0x3ae <pushButtonInit+0x12>
 3a4:	82 30       	cpi	r24, 0x02	; 2
 3a6:	79 f0       	breq	.+30     	; 0x3c6 <pushButtonInit+0x2a>
 3a8:	83 30       	cpi	r24, 0x03	; 3
 3aa:	c1 f4       	brne	.+48     	; 0x3dc <pushButtonInit+0x40>
 3ac:	12 c0       	rjmp	.+36     	; 0x3d2 <pushButtonInit+0x36>
{
case BTN_0:
{
gpioPinDirection(BTN_0_GPIO,BTN_0_BIT,LOW);
 3ae:	82 e0       	ldi	r24, 0x02	; 2
 3b0:	60 e1       	ldi	r22, 0x10	; 16
 3b2:	40 e0       	ldi	r20, 0x00	; 0
 3b4:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>

break;
 3b8:	08 95       	ret
}
case BTN_1:
{
gpioPinDirection(BTN_1_GPIO,BTN_1_BIT,LOW);
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	64 e0       	ldi	r22, 0x04	; 4
 3be:	40 e0       	ldi	r20, 0x00	; 0
 3c0:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>

break;
 3c4:	08 95       	ret
}
case BTN_2:
{
gpioPinDirection(BTN_2_GPIO,BTN_2_BIT,LOW);
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	64 e0       	ldi	r22, 0x04	; 4
 3ca:	40 e0       	ldi	r20, 0x00	; 0
 3cc:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>

break;
 3d0:	08 95       	ret
}
case BTN_3:
{
gpioPinDirection(BTN_3_GPIO,BTN_3_BIT,LOW);
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	68 e0       	ldi	r22, 0x08	; 8
 3d6:	40 e0       	ldi	r20, 0x00	; 0
 3d8:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
 3dc:	08 95       	ret

000003de <pushButtonGetStatus>:
}

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
	
switch(en_butotn_id)
 3de:	81 30       	cpi	r24, 0x01	; 1
 3e0:	f9 f0       	breq	.+62     	; 0x420 <pushButtonGetStatus+0x42>
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	30 f0       	brcs	.+12     	; 0x3f2 <pushButtonGetStatus+0x14>
 3e6:	82 30       	cpi	r24, 0x02	; 2
 3e8:	81 f1       	breq	.+96     	; 0x44a <pushButtonGetStatus+0x6c>
 3ea:	83 30       	cpi	r24, 0x03	; 3
 3ec:	09 f0       	breq	.+2      	; 0x3f0 <pushButtonGetStatus+0x12>
 3ee:	57 c0       	rjmp	.+174    	; 0x49e <pushButtonGetStatus+0xc0>
 3f0:	41 c0       	rjmp	.+130    	; 0x474 <pushButtonGetStatus+0x96>
{
case BTN_0:
{
if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	60 e1       	ldi	r22, 0x10	; 16
 3f6:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
 3fa:	81 30       	cpi	r24, 0x01	; 1
 3fc:	09 f0       	breq	.+2      	; 0x400 <pushButtonGetStatus+0x22>
 3fe:	50 c0       	rjmp	.+160    	; 0x4a0 <pushButtonGetStatus+0xc2>
{ softwareDelayMs(10);
 400:	6a e0       	ldi	r22, 0x0A	; 10
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 bc 02 	call	0x578	; 0x578 <softwareDelayMs>
	if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	60 e1       	ldi	r22, 0x10	; 16
 410:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
	return Pressed;
 414:	91 e0       	ldi	r25, 0x01	; 1
 416:	81 30       	cpi	r24, 0x01	; 1
 418:	09 f4       	brne	.+2      	; 0x41c <pushButtonGetStatus+0x3e>
 41a:	49 c0       	rjmp	.+146    	; 0x4ae <pushButtonGetStatus+0xd0>
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	47 c0       	rjmp	.+142    	; 0x4ae <pushButtonGetStatus+0xd0>
}else{return Released;}
break;		
}
case BTN_1:
{
if(gpioPinRead(BTN_1_GPIO,BTN_1_BIT) == Pressed)
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	64 e0       	ldi	r22, 0x04	; 4
 424:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
 428:	81 30       	cpi	r24, 0x01	; 1
 42a:	e1 f5       	brne	.+120    	; 0x4a4 <pushButtonGetStatus+0xc6>
{
softwareDelayMs(10);
 42c:	6a e0       	ldi	r22, 0x0A	; 10
 42e:	70 e0       	ldi	r23, 0x00	; 0
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 bc 02 	call	0x578	; 0x578 <softwareDelayMs>
if(gpioPinRead(BTN_1_GPIO,BTN_1_BIT) == Pressed)
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	64 e0       	ldi	r22, 0x04	; 4
 43c:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
case BTN_0:
{
if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
{ softwareDelayMs(10);
	if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
	return Pressed;
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	81 30       	cpi	r24, 0x01	; 1
 444:	a1 f1       	breq	.+104    	; 0x4ae <pushButtonGetStatus+0xd0>
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	32 c0       	rjmp	.+100    	; 0x4ae <pushButtonGetStatus+0xd0>
}else{return Released;}
break;		
}
case BTN_2:
{
if(gpioPinRead(BTN_2_GPIO,BTN_2_BIT) == Pressed)
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	64 e0       	ldi	r22, 0x04	; 4
 44e:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
 452:	81 30       	cpi	r24, 0x01	; 1
 454:	49 f5       	brne	.+82     	; 0x4a8 <pushButtonGetStatus+0xca>
{
	softwareDelayMs(10);
 456:	6a e0       	ldi	r22, 0x0A	; 10
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 bc 02 	call	0x578	; 0x578 <softwareDelayMs>
	if(gpioPinRead(BTN_2_GPIO,BTN_2_BIT) == Pressed)
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	64 e0       	ldi	r22, 0x04	; 4
 466:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
case BTN_0:
{
if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
{ softwareDelayMs(10);
	if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
	return Pressed;
 46a:	91 e0       	ldi	r25, 0x01	; 1
 46c:	81 30       	cpi	r24, 0x01	; 1
 46e:	f9 f0       	breq	.+62     	; 0x4ae <pushButtonGetStatus+0xd0>
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	1d c0       	rjmp	.+58     	; 0x4ae <pushButtonGetStatus+0xd0>
}else{return Released;}
break;		
}
case BTN_3:
{
if(gpioPinRead(BTN_3_GPIO,BTN_3_BIT) == Pressed)
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	68 e0       	ldi	r22, 0x08	; 8
 478:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
 47c:	81 30       	cpi	r24, 0x01	; 1
 47e:	b1 f4       	brne	.+44     	; 0x4ac <pushButtonGetStatus+0xce>
{
	softwareDelayMs(10);
 480:	6a e0       	ldi	r22, 0x0A	; 10
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 bc 02 	call	0x578	; 0x578 <softwareDelayMs>
	if(gpioPinRead(BTN_3_GPIO,BTN_3_BIT) == Pressed)
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	68 e0       	ldi	r22, 0x08	; 8
 490:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
case BTN_0:
{
if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
{ softwareDelayMs(10);
	if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
	return Pressed;
 494:	91 e0       	ldi	r25, 0x01	; 1
 496:	81 30       	cpi	r24, 0x01	; 1
 498:	51 f0       	breq	.+20     	; 0x4ae <pushButtonGetStatus+0xd0>
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	08 c0       	rjmp	.+16     	; 0x4ae <pushButtonGetStatus+0xd0>
 49e:	08 95       	ret
	else {return Released;}
}else{return Released;}
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	05 c0       	rjmp	.+10     	; 0x4ae <pushButtonGetStatus+0xd0>
{
softwareDelayMs(10);
if(gpioPinRead(BTN_1_GPIO,BTN_1_BIT) == Pressed)
return Pressed;
	else {return Released;}
}else{return Released;}
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	03 c0       	rjmp	.+6      	; 0x4ae <pushButtonGetStatus+0xd0>
{
	softwareDelayMs(10);
	if(gpioPinRead(BTN_2_GPIO,BTN_2_BIT) == Pressed)
	return Pressed;
else {return Released;}
}else{return Released;}
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	01 c0       	rjmp	.+2      	; 0x4ae <pushButtonGetStatus+0xd0>
{
	softwareDelayMs(10);
	if(gpioPinRead(BTN_3_GPIO,BTN_3_BIT) == Pressed)
	return Pressed;
else {return Released;}
}else{return Released;}
 4ac:	90 e0       	ldi	r25, 0x00	; 0
break;		
}

}
 4ae:	89 2f       	mov	r24, r25
 4b0:	08 95       	ret

000004b2 <main>:
uint8_t Prescaler_Value=0;
volatile uint32_t u32_ovf_counter=0;
int main(void)
{
	uint8_t local_counter=START;
	Led_Init(LED_0);
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	0e 94 4e 01 	call	0x29c	; 0x29c <Led_Init>
	timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_8 ,0,0,T0_INTERRUPT_NORMAL);
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	42 e0       	ldi	r20, 0x02	; 2
 4be:	20 e0       	ldi	r18, 0x00	; 0
 4c0:	00 e0       	ldi	r16, 0x00	; 0
 4c2:	ee 24       	eor	r14, r14
 4c4:	e3 94       	inc	r14
 4c6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <timer0Init>
	pushButtonInit(BTN_0);
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	0e 94 ce 01 	call	0x39c	; 0x39c <pushButtonInit>
    while(1)
    {
	if (pushButtonGetStatus(BTN_0))
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	0e 94 ef 01 	call	0x3de	; 0x3de <pushButtonGetStatus>
 4d6:	88 23       	and	r24, r24
 4d8:	31 f1       	breq	.+76     	; 0x526 <main+0x74>
	{
	Led_On(LED_0);	
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	0e 94 6f 01 	call	0x2de	; 0x2de <Led_On>
	for(local_counter = START;local_counter<MAX;local_counter++)
{
timer0Start();
 4e0:	0e 94 d7 02 	call	0x5ae	; 0x5ae <timer0Start>
timer0DelayMs(500);	
 4e4:	84 ef       	ldi	r24, 0xF4	; 244
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	0e 94 0e 03 	call	0x61c	; 0x61c <timer0DelayMs>
//softwareDelayMs(500);
		if (pushButtonGetStatus(BTN_0))
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	0e 94 ef 01 	call	0x3de	; 0x3de <pushButtonGetStatus>
 4f2:	88 23       	and	r24, r24
 4f4:	31 f0       	breq	.+12     	; 0x502 <main+0x50>
		{
timer0Start();
 4f6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <timer0Start>
timer0DelayMs(1000);
 4fa:	88 ee       	ldi	r24, 0xE8	; 232
 4fc:	93 e0       	ldi	r25, 0x03	; 3
 4fe:	0e 94 0e 03 	call	0x61c	; 0x61c <timer0DelayMs>
	if (pushButtonGetStatus(BTN_0))
	{
	Led_On(LED_0);	
	for(local_counter = START;local_counter<MAX;local_counter++)
{
timer0Start();
 502:	0e 94 d7 02 	call	0x5ae	; 0x5ae <timer0Start>
timer0DelayMs(500);	
 506:	84 ef       	ldi	r24, 0xF4	; 244
 508:	91 e0       	ldi	r25, 0x01	; 1
 50a:	0e 94 0e 03 	call	0x61c	; 0x61c <timer0DelayMs>
//softwareDelayMs(500);
		if (pushButtonGetStatus(BTN_0))
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	0e 94 ef 01 	call	0x3de	; 0x3de <pushButtonGetStatus>
 514:	88 23       	and	r24, r24
 516:	e1 f2       	breq	.-72     	; 0x4d0 <main+0x1e>
		{
timer0Start();
 518:	0e 94 d7 02 	call	0x5ae	; 0x5ae <timer0Start>
timer0DelayMs(1000);
 51c:	88 ee       	ldi	r24, 0xE8	; 232
 51e:	93 e0       	ldi	r25, 0x03	; 3
 520:	0e 94 0e 03 	call	0x61c	; 0x61c <timer0DelayMs>
 524:	d5 cf       	rjmp	.-86     	; 0x4d0 <main+0x1e>
		}
	}
	}
	else
	{
	Led_Off(LED_0);
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	0e 94 90 01 	call	0x320	; 0x320 <Led_Off>
 52c:	d1 cf       	rjmp	.-94     	; 0x4d0 <main+0x1e>

0000052e <__vector_11>:
}


void __vector_11(void) __attribute__((signal,__INTR_ATTRS));
void __vector_11(void)
{
 52e:	1f 92       	push	r1
 530:	0f 92       	push	r0
 532:	0f b6       	in	r0, 0x3f	; 63
 534:	0f 92       	push	r0
 536:	11 24       	eor	r1, r1
 538:	8f 93       	push	r24
 53a:	9f 93       	push	r25
 53c:	af 93       	push	r26
 53e:	bf 93       	push	r27
	u32_ovf_counter++;
 540:	80 91 60 00 	lds	r24, 0x0060
 544:	90 91 61 00 	lds	r25, 0x0061
 548:	a0 91 62 00 	lds	r26, 0x0062
 54c:	b0 91 63 00 	lds	r27, 0x0063
 550:	01 96       	adiw	r24, 0x01	; 1
 552:	a1 1d       	adc	r26, r1
 554:	b1 1d       	adc	r27, r1
 556:	80 93 60 00 	sts	0x0060, r24
 55a:	90 93 61 00 	sts	0x0061, r25
 55e:	a0 93 62 00 	sts	0x0062, r26
 562:	b0 93 63 00 	sts	0x0063, r27
 566:	bf 91       	pop	r27
 568:	af 91       	pop	r26
 56a:	9f 91       	pop	r25
 56c:	8f 91       	pop	r24
 56e:	0f 90       	pop	r0
 570:	0f be       	out	0x3f, r0	; 63
 572:	0f 90       	pop	r0
 574:	1f 90       	pop	r1
 576:	18 95       	reti

00000578 <softwareDelayMs>:
 *
 * Created: 17/01/2020 03:54:09 م
 *  Author: mo
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
 578:	ab 01       	movw	r20, r22
 57a:	bc 01       	movw	r22, r24
uint32_t Local_Nope_counter=0;
while (u32_delay_in_ms > 0)
 57c:	41 15       	cp	r20, r1
 57e:	51 05       	cpc	r21, r1
 580:	61 05       	cpc	r22, r1
 582:	71 05       	cpc	r23, r1
 584:	61 f4       	brne	.+24     	; 0x59e <softwareDelayMs+0x26>
 586:	08 95       	ret
 588:	01 96       	adiw	r24, 0x01	; 1
{
	for(Local_Nope_counter = 0 ;Local_Nope_counter<1500;Local_Nope_counter++);
 58a:	e5 e0       	ldi	r30, 0x05	; 5
 58c:	8c 3d       	cpi	r24, 0xDC	; 220
 58e:	9e 07       	cpc	r25, r30
 590:	d9 f7       	brne	.-10     	; 0x588 <softwareDelayMs+0x10>

u32_delay_in_ms--;	
 592:	41 50       	subi	r20, 0x01	; 1
 594:	50 40       	sbci	r21, 0x00	; 0
 596:	60 40       	sbci	r22, 0x00	; 0
 598:	70 40       	sbci	r23, 0x00	; 0
 *  Author: mo
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
uint32_t Local_Nope_counter=0;
while (u32_delay_in_ms > 0)
 59a:	19 f4       	brne	.+6      	; 0x5a2 <softwareDelayMs+0x2a>
 59c:	08 95       	ret
 *
 * Created: 17/01/2020 03:54:09 م
 *  Author: mo
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
 59e:	20 e0       	ldi	r18, 0x00	; 0
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	c9 01       	movw	r24, r18
 5a4:	f1 cf       	rjmp	.-30     	; 0x588 <softwareDelayMs+0x10>

000005a6 <timer0Set>:
}

}
void timer0Set(uint8_t u8_value)
{
TCNT0 =	u8_value;	 
 5a6:	82 bf       	out	0x32, r24	; 50
}
 5a8:	08 95       	ret

000005aa <timer0Read>:
 
uint8_t timer0Read(void)
{
	 return TCNT0;	 
 5aa:	82 b7       	in	r24, 0x32	; 50
}
 5ac:	08 95       	ret

000005ae <timer0Start>:
						
*/
void timer0Start(void)
{

	 TCCR0 &= (0xF8);		 
 5ae:	83 b7       	in	r24, 0x33	; 51
 5b0:	88 7f       	andi	r24, 0xF8	; 248
 5b2:	83 bf       	out	0x33, r24	; 51
	 TCCR0 |= Prescaler_Value;
 5b4:	93 b7       	in	r25, 0x33	; 51
 5b6:	80 91 64 00 	lds	r24, 0x0064
 5ba:	89 2b       	or	r24, r25
 5bc:	83 bf       	out	0x33, r24	; 51
}
 5be:	08 95       	ret

000005c0 <timer0Stop>:
						      0     0    0
*/ 
void timer0Stop(void)
 {
	 
TCCR0 &= (0xF8);		 
 5c0:	83 b7       	in	r24, 0x33	; 51
 5c2:	88 7f       	andi	r24, 0xF8	; 248
 5c4:	83 bf       	out	0x33, r24	; 51
	 
 }
 5c6:	08 95       	ret

000005c8 <timer0Init>:
#include "ledConfig.h"
#include "timers.h"
#include "registers.h"
#include "Interrupts.h"
void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal,uint8_t u8_initialValue, uint8_t u8_outputCompare,En_timer0Interrupt_t en_interruptMask)
{
 5c8:	ef 92       	push	r14
 5ca:	0f 93       	push	r16
if(en_prescal == T0_NO_CLOCK)
 5cc:	44 23       	and	r20, r20
 5ce:	19 f4       	brne	.+6      	; 0x5d6 <timer0Init+0xe>
{/*
if there is no clock the timer will be disabled
*/
timer0Stop();
 5d0:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <timer0Stop>
 5d4:	20 c0       	rjmp	.+64     	; 0x616 <timer0Init+0x4e>
}
else
{
TCCR0 |= en_mode | en_OC0|en_prescal ;
 5d6:	93 b7       	in	r25, 0x33	; 51
 5d8:	89 2b       	or	r24, r25
 5da:	68 2b       	or	r22, r24
 5dc:	64 2b       	or	r22, r20
 5de:	63 bf       	out	0x33, r22	; 51
Prescaler_Value=en_prescal;
 5e0:	40 93 64 00 	sts	0x0064, r20
TCNT0 = u8_initialValue;
 5e4:	22 bf       	out	0x32, r18	; 50
OCR0  =u8_outputCompare;
 5e6:	0c bf       	out	0x3c, r16	; 60
switch(en_interruptMask){
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	e8 16       	cp	r14, r24
 5ec:	49 f0       	breq	.+18     	; 0x600 <timer0Init+0x38>
 5ee:	e8 16       	cp	r14, r24
 5f0:	20 f0       	brcs	.+8      	; 0x5fa <timer0Init+0x32>
 5f2:	82 e0       	ldi	r24, 0x02	; 2
 5f4:	e8 16       	cp	r14, r24
 5f6:	79 f4       	brne	.+30     	; 0x616 <timer0Init+0x4e>
 5f8:	09 c0       	rjmp	.+18     	; 0x60c <timer0Init+0x44>
case  T0_POLLING:
TIMSK &= T0_POLLING;
 5fa:	89 b7       	in	r24, 0x39	; 57
 5fc:	19 be       	out	0x39, r1	; 57
break;
 5fe:	0b c0       	rjmp	.+22     	; 0x616 <timer0Init+0x4e>
case T0_INTERRUPT_NORMAL :
{
G_interrupt_Enable();
 600:	0e 94 45 01 	call	0x28a	; 0x28a <G_interrupt_Enable>
TIMSK |= T0_INTERRUPT_NORMAL;
 604:	89 b7       	in	r24, 0x39	; 57
 606:	81 60       	ori	r24, 0x01	; 1
 608:	89 bf       	out	0x39, r24	; 57
break;
 60a:	05 c0       	rjmp	.+10     	; 0x616 <timer0Init+0x4e>
}
case T0_INTERRUPT_CMP:
{
G_interrupt_Enable();
 60c:	0e 94 45 01 	call	0x28a	; 0x28a <G_interrupt_Enable>
TIMSK |=T0_INTERRUPT_CMP;
 610:	89 b7       	in	r24, 0x39	; 57
 612:	82 60       	ori	r24, 0x02	; 2
 614:	89 bf       	out	0x39, r24	; 57
}
}
	 
}

}
 616:	0f 91       	pop	r16
 618:	ef 90       	pop	r14
 61a:	08 95       	ret

0000061c <timer0DelayMs>:
 
 
 
 */
 void timer0DelayMs(uint16_t u16_delay_in_ms)
 {
 61c:	cf 93       	push	r28
 61e:	df 93       	push	r29
 620:	ec 01       	movw	r28, r24
	uint32_t u32_loop=0;
	u32_ovf_counter=0;
 622:	10 92 60 00 	sts	0x0060, r1
 626:	10 92 61 00 	sts	0x0061, r1
 62a:	10 92 62 00 	sts	0x0062, r1
 62e:	10 92 63 00 	sts	0x0063, r1
		timer0Set(48);
 632:	80 e3       	ldi	r24, 0x30	; 48
 634:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <timer0Set>
		while(u32_ovf_counter <= (8)*u16_delay_in_ms);
 638:	cc 0f       	add	r28, r28
 63a:	dd 1f       	adc	r29, r29
 63c:	cc 0f       	add	r28, r28
 63e:	dd 1f       	adc	r29, r29
 640:	cc 0f       	add	r28, r28
 642:	dd 1f       	adc	r29, r29
 644:	ae 01       	movw	r20, r28
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	70 e0       	ldi	r23, 0x00	; 0
 64a:	80 91 60 00 	lds	r24, 0x0060
 64e:	90 91 61 00 	lds	r25, 0x0061
 652:	a0 91 62 00 	lds	r26, 0x0062
 656:	b0 91 63 00 	lds	r27, 0x0063
 65a:	48 17       	cp	r20, r24
 65c:	59 07       	cpc	r21, r25
 65e:	6a 07       	cpc	r22, r26
 660:	7b 07       	cpc	r23, r27
 662:	98 f7       	brcc	.-26     	; 0x64a <timer0DelayMs+0x2e>
	
}
 664:	df 91       	pop	r29
 666:	cf 91       	pop	r28
 668:	08 95       	ret

0000066a <timer0DelayUs>:
 
 
 
 */
 void timer0DelayUs(uint32_t u32_delay_in_us)
 {  uint32_t u32_loop=0;
 66a:	8f 92       	push	r8
 66c:	9f 92       	push	r9
 66e:	af 92       	push	r10
 670:	bf 92       	push	r11
 672:	cf 92       	push	r12
 674:	df 92       	push	r13
 676:	ef 92       	push	r14
 678:	ff 92       	push	r15
 67a:	4b 01       	movw	r8, r22
 67c:	5c 01       	movw	r10, r24
	u32_ovf_counter=0;
 67e:	10 92 60 00 	sts	0x0060, r1
 682:	10 92 61 00 	sts	0x0061, r1
 686:	10 92 62 00 	sts	0x0062, r1
 68a:	10 92 63 00 	sts	0x0063, r1
	for (u32_loop=0;u32_loop<u32_delay_in_us;u32_loop++)
 68e:	61 15       	cp	r22, r1
 690:	71 05       	cpc	r23, r1
 692:	81 05       	cpc	r24, r1
 694:	91 05       	cpc	r25, r1
 696:	e9 f0       	breq	.+58     	; 0x6d2 <timer0DelayUs+0x68>
 698:	cc 24       	eor	r12, r12
 69a:	dd 24       	eor	r13, r13
 69c:	76 01       	movw	r14, r12
	{
	timer0Set(254);
 69e:	8e ef       	ldi	r24, 0xFE	; 254
 6a0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <timer0Set>
	while(u32_ovf_counter <= 1);	
 6a4:	80 91 60 00 	lds	r24, 0x0060
 6a8:	90 91 61 00 	lds	r25, 0x0061
 6ac:	a0 91 62 00 	lds	r26, 0x0062
 6b0:	b0 91 63 00 	lds	r27, 0x0063
 6b4:	82 30       	cpi	r24, 0x02	; 2
 6b6:	91 05       	cpc	r25, r1
 6b8:	a1 05       	cpc	r26, r1
 6ba:	b1 05       	cpc	r27, r1
 6bc:	98 f3       	brcs	.-26     	; 0x6a4 <timer0DelayUs+0x3a>
 
 */
 void timer0DelayUs(uint32_t u32_delay_in_us)
 {  uint32_t u32_loop=0;
	u32_ovf_counter=0;
	for (u32_loop=0;u32_loop<u32_delay_in_us;u32_loop++)
 6be:	08 94       	sec
 6c0:	c1 1c       	adc	r12, r1
 6c2:	d1 1c       	adc	r13, r1
 6c4:	e1 1c       	adc	r14, r1
 6c6:	f1 1c       	adc	r15, r1
 6c8:	c8 14       	cp	r12, r8
 6ca:	d9 04       	cpc	r13, r9
 6cc:	ea 04       	cpc	r14, r10
 6ce:	fb 04       	cpc	r15, r11
 6d0:	31 f7       	brne	.-52     	; 0x69e <timer0DelayUs+0x34>
	timer0Set(254);
	while(u32_ovf_counter <= 1);	
	//while(u32_ovf_counter <= (8*u32_delay_in_us/1000));
	}
	
}/*1*/
 6d2:	ff 90       	pop	r15
 6d4:	ef 90       	pop	r14
 6d6:	df 90       	pop	r13
 6d8:	cf 90       	pop	r12
 6da:	bf 90       	pop	r11
 6dc:	af 90       	pop	r10
 6de:	9f 90       	pop	r9
 6e0:	8f 90       	pop	r8
 6e2:	08 95       	ret

000006e4 <timer0SwPWM>:
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
	 u32_ovf_counter=0;
 6e4:	10 92 60 00 	sts	0x0060, r1
 6e8:	10 92 61 00 	sts	0x0061, r1
 6ec:	10 92 62 00 	sts	0x0062, r1
 6f0:	10 92 63 00 	sts	0x0063, r1
	 timer0Set(155);
 6f4:	8b e9       	ldi	r24, 0x9B	; 155
 6f6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <timer0Set>
	 while(u32_ovf_counter <= 1);
 6fa:	80 91 60 00 	lds	r24, 0x0060
 6fe:	90 91 61 00 	lds	r25, 0x0061
 702:	a0 91 62 00 	lds	r26, 0x0062
 706:	b0 91 63 00 	lds	r27, 0x0063
 70a:	82 30       	cpi	r24, 0x02	; 2
 70c:	91 05       	cpc	r25, r1
 70e:	a1 05       	cpc	r26, r1
 710:	b1 05       	cpc	r27, r1
 712:	98 f3       	brcs	.-26     	; 0x6fa <timer0SwPWM+0x16>
	 
	 
} 
 714:	08 95       	ret

00000716 <timer1Init>:
 En_timer1Interrupt_t en_interruptMask)
 {
	 
	 
	 
 }
 716:	08 95       	ret

00000718 <timer1Set>:
 * @param value
 */
void timer1Set(uint16_t u16_value)
{
	
}
 718:	08 95       	ret

0000071a <timer1Read>:
 */
uint16_t timer1Read(void)
{
	
	
}
 71a:	08 95       	ret

0000071c <timer1Start>:
void timer1Start(void)
{


	
}
 71c:	08 95       	ret

0000071e <timer1Stop>:
void timer1Stop(void)
{
	
	
	
}
 71e:	08 95       	ret

00000720 <timer1DelayMs>:
 */
void timer1DelayMs(uint16_t u16_delay_in_ms)
{
	
	
}
 720:	08 95       	ret

00000722 <timer1DelayUs>:
 */
void timer1DelayUs(uint32_t u32_delay_in_us)
{
	
	
}
 722:	08 95       	ret

00000724 <timer1SwPWM>:
 */
void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
	
	
}
 724:	08 95       	ret

00000726 <_exit>:
 726:	f8 94       	cli

00000728 <__stop_program>:
 728:	ff cf       	rjmp	.-2      	; 0x728 <__stop_program>
